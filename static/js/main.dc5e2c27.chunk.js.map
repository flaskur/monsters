{"version":3,"sources":["components/card/card.js","components/cardlist/cardlist.js","components/searchbar/searchbar.js","App.js","index.js"],"names":["card","monster","className","alt","src","id","name","email","Cardlist","monsters","map","key","Searchbar","searchbar","handleSearchChange","type","placeholder","onChange","value","App","React","useState","setMonsters","setSearchbar","filteredMonsters","filter","toLowerCase","includes","useEffect","fetch","then","response","json","users","event","console","log","target","ReactDOM","render","document","getElementById"],"mappings":"qQAceA,G,WAXF,YAAuB,IAAZC,EAAW,EAAXA,QACvB,OACC,yBAAKC,UAAU,kBAEd,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,4BAAKJ,EAAQK,MACb,4BAAKL,EAAQM,UC4BDC,EAhCE,YAAwB,IAAbC,EAAY,EAAZA,SAC3B,OACC,yBAAKP,UAAU,YACbO,EAASC,KAAI,SAACT,GACd,OAAO,kBAAC,EAAD,CAAMU,IAAKV,EAAQI,GAAIJ,QAASA,SCG5BW,G,MATG,YAA6C,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,mBACvC,OACC,yBAAKZ,UAAU,aACd,+CACA,2BAAOa,KAAK,SAASC,YAAY,kBAAkBC,SAAUH,EAAoBI,MAAOL,OCgC5EM,G,MAlCH,WAAY,IAAD,EACYC,IAAMC,SAAS,IAD3B,mBACdZ,EADc,KACJa,EADI,OAEcF,IAAMC,SAAS,IAF7B,mBAEdR,EAFc,KAEHU,EAFG,KAIhBC,EAAmBf,EAASgB,QAAO,SAACxB,GACzC,OAAOA,EAAQK,KAAKoB,cAAcC,SAASd,EAAUa,kBAiBtD,OANAN,IAAMQ,WAAU,WACfC,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAWX,EAAYW,QAC5B,IAGF,yBAAK/B,UAAU,OACd,wCAIA,kBAAC,EAAD,CAAWW,UAAWA,EAAWC,mBAlBR,SAASoB,GACnCC,QAAQC,IAAIF,EAAMG,OAAOnB,OACzBK,EAAaW,EAAMG,OAAOnB,OAC1BiB,QAAQC,IAAIvB,MAgBX,kBAAC,EAAD,CAAUJ,SAAUe,OC9BvBc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.dc5e2c27.chunk.js","sourcesContent":["import React from 'react';\nimport './card.css';\n\nconst card = function({ monster }) {\n\treturn (\n\t\t<div className=\"card_container\">\n\t\t\t{/* alt means text that appears if the image fails */}\n\t\t\t<img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\n\t\t\t<h2>{monster.name}</h2>\n\t\t\t<h3>{monster.email}</h3>\n\t\t</div>\n\t);\n};\n\nexport default card;\n","import React from 'react';\nimport './cardlist.css';\nimport Card from '../card/card';\n\n// Extrapolate into parent of normal card component.\nconst Cardlist = function({ monsters }) {\n\treturn (\n\t\t<div className=\"cardlist\">\n\t\t\t{monsters.map((monster) => {\n\t\t\t\treturn <Card key={monster.id} monster={monster} />;\n\t\t\t})}\n\t\t</div>\n\t);\n};\n\n// const Cardlist = function({ monsters }) {\n// \treturn (\n// \t\t<div className=\"cardlist\">\n// \t\t\t{/* The props argument name doesn't matter */}\n// \t\t\t{/* {banana.monsters.map((monster) => <h3>{monster.name}</h3>)} */}\n// \t\t\t{monsters.map((monster) => {\n// \t\t\t\treturn <h2 key={monster.id}>{monster.name}</h2>;\n// \t\t\t})}\n// \t\t</div>\n// \t);\n// };\n\n// Using class components means you uses this.props instead.\n// class Cardlist extends React.Component {\n// \t// Is the props stuff implied? Yes, but it needs to be in the render method for some reason.\n\n// \trender() {\n// \t\tconsole.log(this.props);\n// \t\treturn <div className=\"cardlist\">{this.props.monsters.map((monster) => <h3>{monster.name}</h3>)}</div>;\n// \t}\n// }\n\nexport default Cardlist;\n","import React from 'react';\nimport './searchbar.css';\n\nconst Searchbar = function({ searchbar, handleSearchChange }) {\n\treturn (\n\t\t<div className=\"searchbar\">\n\t\t\t<h1>SEARCH MONSTERS</h1>\n\t\t\t<input type=\"search\" placeholder=\"search monsters\" onChange={handleSearchChange} value={searchbar} />\n\t\t</div>\n\t);\n};\n\nexport default Searchbar;\n","import React from 'react';\nimport Cardlist from './components/cardlist/cardlist';\nimport Searchbar from './components/searchbar/searchbar';\nimport './App.css';\n\nconst App = function() {\n\tconst [ monsters, setMonsters ] = React.useState([]);\n\tconst [ searchbar, setSearchbar ] = React.useState('');\n\n\tconst filteredMonsters = monsters.filter((monster) => {\n\t\treturn monster.name.toLowerCase().includes(searchbar.toLowerCase());\n\t});\n\n\t// So event handlers are inside the component themselves. Alternative is the callback format.\n\t// If I remember correctly, to pass params to an event handler you do () => someFunc(arg) which like another level of indirection.\n\tconst handleSearchChange = function(event) {\n\t\tconsole.log(event.target.value);\n\t\tsetSearchbar(event.target.value);\n\t\tconsole.log(searchbar);\n\t};\n\n\tReact.useEffect(() => {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((users) => setMonsters(users));\n\t}, []);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Monsters</h1>\n\n\t\t\t{/* Extrapolate into component instead */}\n\t\t\t{/* <input type=\"search\" placeholder=\"search monsters\" onChange={handleSearchChange} value={searchbar} /> */}\n\t\t\t<Searchbar searchbar={searchbar} handleSearchChange={handleSearchChange} />\n\t\t\t<Cardlist monsters={filteredMonsters} />\n\t\t</div>\n\t);\n};\n\nexport default App;\n\n// On initial development, consider just doing everything in one file, and then extrapolating into components, rather than go through the whole process of making files and such. Also consider not organizing the folder structure in terms of components, but rather in terms of features. This seems more organized.\n\n/**\n * navbar\n *  styles\n * \tcomponents\n * \tstatic\n * \tetc.\n * header\n *  styles\n * \tcomponents\n * \tstatic\n * \tetc.\n */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}